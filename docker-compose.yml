version: "3.9"

services:
  # =====================================================
  # üß† API ‚Äì FastAPI Backend
  # =====================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file: [.env]
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - .:/app
      - ./data:/data
      - ./logs:/logs
      - ./models:/models
      - ./ollama-data:/root/.ollama
    depends_on:
      db:
        condition: service_started
      qdrant:
        condition: service_healthy
      tika:
        condition: service_healthy
      ollama:
        condition: service_started
    command: >
      bash -c "
        echo 'üöÄ Initialisiere Luna IEMS ...';
        set -e;
        python -u scripts/startup.py || echo '‚ö†Ô∏è Startup-Skript beendet (nicht kritisch)';
        echo '‚úÖ Starte FastAPI-Service ...';
        exec python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 --log-level info --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s
    networks:
      - luna-net

  # =====================================================
  # üóÑÔ∏è Datenbank ‚Äì PostgreSQL
  # =====================================================
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-luna}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - luna-net

  # =====================================================
  # üíæ Qdrant ‚Äì Vektor-Datenbank
  # =====================================================
  qdrant:
    image: qdrant/qdrant:v1.11.0
    restart: unless-stopped
    ports:
      - "${QDRANT_HTTP:-6333}:6333"
      - "${QDRANT_GRPC:-6334}:6334"
    environment:
      QDRANT__STORAGE__SYNC_DISABLED: "true"
      QDRANT__STORAGE__WAL_CAPACITY_MB: "64"
      QDRANT__STORAGE__WAL_SEGMENT_SIZE_MB: "128"
      QDRANT__STORAGE__DISK_CACHE_MB: "4096"
      QDRANT__LOG_LEVEL: "INFO"
      QDRANT__SERVICE__API_KEY: ""
      QDRANT__STORAGE__SNAPSHOTS_PATH: "/qdrant/storage/snapshots"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./models:/models:ro
    healthcheck:
     test: ["CMD-SHELL", "curl -fs http://localhost:6333/dashboard || exit 0"]
     interval: 30s
     timeout: 5s
     retries: 5
     start_period: 120s
     networks:
      - luna-net

  # =====================================================
  # üß† Ollama ‚Äì LLM Runtime mit lokalem Cache
  # =====================================================
  ollama:
    image: ollama/ollama:latest
    restart: always
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    environment:
      OLLAMA_KEEP_ALIVE: "0"
      OLLAMA_NUM_PARALLEL: "4"
      REQUIRED_MODELS: "llama3.1:8b nomic-embed-text"
    volumes:
      - ./ollama-data:/root/.ollama
      - ./scripts/start_ollama.sh:/start_ollama.sh:ro
    entrypoint: ["/bin/sh", "/start_ollama.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - luna-net

  # =====================================================
  # üìë Apache Tika ‚Äì Dokumentenparser
  # =====================================================
  tika:
    image: logicalspark/docker-tikaserver:latest
    restart: always
    ports:
      - "${TIKA_PORT:-9998}:9998"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/tika"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - luna-net

  # =====================================================
  # üß© Worker ‚Äì Hintergrundprozesse & Training
  # =====================================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: ["tail", "-f", "/dev/null"]
    env_file: [.env]
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      tika:
        condition: service_healthy
      ollama:
        condition: service_started
    volumes:
      - ./data:/data
      - ./logs:/logs
      - ./models:/models
      - ./ollama-data:/root/.ollama
    networks:
      - luna-net

  # =====================================================
  # üß© Weekly Updater ‚Äì automatischer Wartungsjob
  # =====================================================
  updater:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: ["sh", "-c", "bash /app/scripts/update_all.sh"]
    env_file: [.env]
    volumes:
      - .:/app
      - ./ollama-data:/root/.ollama
      - ./logs:/app/logs
    networks:
      - luna-net
    restart: "no"

# =====================================================
# üîó Netzwerke & Volumes
# =====================================================
networks:
  luna-net:
    driver: bridge

volumes:
  db_data:
  qdrant_data:
  ollama_data:
  models:
  logs:
  data:

