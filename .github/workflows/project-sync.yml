name: 🔄 Sync Project Plan to GitHub Board (v4)

on:
  push:
    paths:
      - 'docs/project-plan.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 1'   # jeden Montag 06:00 Uhr

permissions:
  contents: read
  issues: write
  organization-projects: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # -----------------------------------------------------
      # 1️⃣ Repository auschecken
      # -----------------------------------------------------
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      # -----------------------------------------------------
      # 2️⃣ GitHub CLI installieren (für Projects API)
      # -----------------------------------------------------
      - name: 🧰 Setup GitHub CLI
        uses: cli/cli-action@v2

      # -----------------------------------------------------
      # 3️⃣ YAML prüfen
      # -----------------------------------------------------
      - name: 📚 Inspect project-plan.yml
        run: |
          echo "🧾 Prüfe docs/project-plan.yml..."
          if [ ! -f docs/project-plan.yml ]; then
            echo "❌ Datei docs/project-plan.yml nicht gefunden!"
            exit 1
          fi
          head -20 docs/project-plan.yml
          echo "✅ YAML erfolgreich geladen."

      # -----------------------------------------------------
      # 4️⃣ Project Board suchen
      # -----------------------------------------------------
      - name: 🔍 Locate Project Board via GraphQL API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔎 Suche nach Projektboard '🌙 Luna-IEMS Development Board'..."
          gh api graphql -f query='
            query {
              organization(login: "Luna-IEMS") {
                projectsV2(first: 10) {
                  nodes { id title url }
                }
              }
            }' > projects.json

          cat projects.json | jq -r '.data.organization.projectsV2.nodes[] | "\(.title) → \(.id) (\(.url))"'

          export PROJECT_ID=$(cat projects.json | jq -r '.data.organization.projectsV2.nodes[] | select(.title=="🌙 Luna-IEMS Development Board") | .id')
          if [ -z "$PROJECT_ID" ]; then
            echo "❌ Kein passendes Board gefunden. Bitte sicherstellen, dass das Project in der Orga 'Luna-IEMS' existiert."
            exit 1
          fi
          echo "✅ Board gefunden mit ID: $PROJECT_ID"

      # -----------------------------------------------------
      # 5️⃣ YAML lesen und Issues erstellen
      # -----------------------------------------------------
      - name: 🧩 Parse YAML and create Issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: Luna-IEMS
          REPO: luna-dev
        run: |
          echo "📚 Lade und verarbeite docs/project-plan.yml..."
          pip install pyyaml requests > /dev/null

          python3 <<'PYCODE'
          import os, yaml, subprocess

          owner = os.getenv("OWNER")
          repo = os.getenv("REPO")

          with open("docs/project-plan.yml", "r") as f:
              plan = yaml.safe_load(f)

          print(f"🔍 {len(plan.get('phases', []))} Phasen gefunden.")
          for phase in plan.get("phases", []):
              phase_name = phase.get("title")
              for deliverable in phase.get("deliverables", []):
                  title = f"{phase_name}: {deliverable}"
                  print(f"📌 Erstelle/prüfe Issue: {title}")
                  cmd = [
                      "gh", "issue", "list", "--repo", f"{owner}/{repo}",
                      "--search", f'"{title}"', "--state", "all", "--json", "title"
                  ]
                  existing = subprocess.check_output(" ".join(cmd), shell=True).decode("utf-8").strip()
                  if title in existing:
                      print(f"✅ Bereits vorhanden: {title}")
                      continue
                  subprocess.run([
                      "gh", "issue", "create",
                      "--repo", f"{owner}/{repo}",
                      "--title", title,
                      "--body", f"Automatisch erstellt aus project-plan.yml\n\nPhase: **{phase_name}**\nDeliverable: `{deliverable}`",
                      "--label", "auto-sync"
                  ])
                  print(f"✨ Issue erstellt: {title}")
          PYCODE
          echo "✅ Alle Issues wurden verarbeitet."

      # -----------------------------------------------------
      # 6️⃣ Projektbeschreibung aktualisieren
      # -----------------------------------------------------
      - name: 🔄 Update Board Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID=$(cat projects.json | jq -r '.data.organization.projectsV2.nodes[] | select(.title=="🌙 Luna-IEMS Development Board") | .id')
          echo "🪄 Aktualisiere Projektbeschreibung..."
          gh api graphql -f query='
            mutation($project:ID!, $desc:String!) {
              updateProjectV2(input: { projectId: $project, shortDescription: $desc }) {
                projectV2 { title shortDescription }
              }
            }' -f project="$PROJECT_ID" -f desc="🚀 Automatischer Sync: $(date -u)"
          echo "✅ Sync abgeschlossen."
