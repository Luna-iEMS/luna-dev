name: üîÑ Luna IEMS Project Sync

on:
  # L√§uft automatisch, wenn sich der Projektplan √§ndert
  push:
    paths:
      - 'docs/project-plan.yml'

  # L√§uft automatisch jeden Montag um 06:00 UTC
  schedule:
    - cron: '0 6 * * 1'

  # Manuell startbar √ºber das GitHub Actions Men√º
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  organization-projects: write

jobs:
  sync-project:
    name: üß© Sync Project Plan to GitHub Board
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # -----------------------------------------------------
      # 1Ô∏è‚É£ Repository auschecken
      # -----------------------------------------------------
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      # -----------------------------------------------------
      # 2Ô∏è‚É£ GitHub CLI einrichten (f√ºr Projects API)
      # -----------------------------------------------------
      - name: üß∞ Setup GitHub CLI
        uses: cli/cli-action@v2

      # -----------------------------------------------------
      # 3Ô∏è‚É£ Abh√§ngigkeiten installieren
      # -----------------------------------------------------
      - name: üß© Install Python packages
        run: pip install pyyaml requests > /dev/null

      # -----------------------------------------------------
      # 4Ô∏è‚É£ Projektboard-ID abrufen
      # -----------------------------------------------------
      - name: üîç Locate Project Board via GraphQL API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîé Suche nach Projektboard 'üåô Luna-IEMS Development Board'..."
          gh api graphql -f query='
            query {
              organization(login: "Luna-IEMS") {
                projectsV2(first: 20) {
                  nodes { id title url }
                }
              }
            }' > projects.json

          cat projects.json | jq -r '.data.organization.projectsV2.nodes[] | "\(.title) ‚Üí \(.id) (\(.url))"'

          export PROJECT_ID=$(cat projects.json | jq -r '.data.organization.projectsV2.nodes[] | select(.title=="üåô Luna-IEMS Development Board") | .id')
          if [ -z "$PROJECT_ID" ]; then
            echo "‚ùå Kein passendes Board gefunden. Bitte sicherstellen, dass das Project in der Orga 'Luna-IEMS' existiert."
            exit 1
          fi
          echo "‚úÖ Board gefunden mit ID: $PROJECT_ID"

      # -----------------------------------------------------
      # 5Ô∏è‚É£ YAML lesen und Issues synchronisieren
      # -----------------------------------------------------
      - name: üßæ Parse project-plan.yml and sync issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: Luna-IEMS
          REPO: luna-dev
        run: |
          echo "üìö Lade und verarbeite docs/project-plan.yml..."
          python3 <<'PYCODE'
          import os, yaml, subprocess

          owner = os.getenv("OWNER")
          repo = os.getenv("REPO")

          with open("docs/project-plan.yml", "r") as f:
              plan = yaml.safe_load(f)

          print(f"üîç {len(plan.get('phases', []))} Phasen gefunden.\n")

          for phase in plan.get("phases", []):
              phase_name = phase.get("title")
              for deliverable in phase.get("deliverables", []):
                  title = f"{phase_name}: {deliverable}"
                  print(f"üìå Pr√ºfe Issue: {title}")

                  # Bestehende Issues abrufen
                  cmd = [
                      "gh", "issue", "list", "--repo", f"{owner}/{repo}",
                      "--search", title, "--state", "all", "--json", "title"
                  ]
                  existing = subprocess.check_output(" ".join(cmd), shell=True).decode("utf-8").strip()
                  if title in existing:
                      print(f"‚úÖ Bereits vorhanden: {title}")
                      continue

                  # Neues Issue anlegen
                  subprocess.run([
                      "gh", "issue", "create",
                      "--repo", f"{owner}/{repo}",
                      "--title", title,
                      "--body", f"Automatisch erstellt aus project-plan.yml\n\nPhase: **{phase_name}**\nDeliverable: `{deliverable}`",
                      "--label", "auto-sync"
                  ])
                  print(f"‚ú® Neu erstellt: {title}\n")

          print("\nüéØ Alle Issues wurden erfolgreich synchronisiert.")
          PYCODE

      # -----------------------------------------------------
      # 6Ô∏è‚É£ Projektbeschreibung aktualisieren
      # -----------------------------------------------------
      - name: ü™Ñ Update Project Board Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_ID=$(cat projects.json | jq -r '.data.organization.projectsV2.nodes[] | select(.title=="üåô Luna-IEMS Development Board") | .id')
          echo "ü™∂ Aktualisiere Projektbeschreibung..."
          gh api graphql -f query='
            mutation($project:ID!, $desc:String!) {
              updateProjectV2(input: { projectId: $project, shortDescription: $desc }) {
                projectV2 { title shortDescription }
              }
            }' -f project="$PROJECT_ID" -f desc="üöÄ Automatischer Sync: $(date -u)"
          echo "‚úÖ Projektbeschreibung aktualisiert."

      # -----------------------------------------------------
      # 7Ô∏è‚É£ Erfolgsmeldung
      # -----------------------------------------------------
      - name: ‚úÖ Finished
        run: echo "üéâ Project Sync erfolgreich abgeschlossen!"
